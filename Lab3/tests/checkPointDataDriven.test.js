const checkPoint = require('../src/point');

describe('checkPoint - Тестирование, управляемое данными', () => {
    const R = 5;

    // Тестовые данные: [x, y, expected]
    const testCases = [
        // Класс 1: точка в 1 области
        [0, 0, '1 область', 'центр круга'],
        [-2, 2, '1 область', 'ниже линии y = x + R'],
        [0, R, '1 область', 'на границе круга (ось Y)'],
        [-R, 0, '1 область', 'на границе круга (ось X)'],

        // Класс 2: точка в 2 области
        [-2, 4, '2 область', 'выше линии y = x + R'],
        [3, -4, '2 область', 'в четвёртом квадранте'],
        [4, -3, '2 область', 'в четвёртом квадранте, на границе'],

        // Класс 3: точка в 3 области
        [6, 0, '3 область', 'вне круга, правее'],
        [0, 6, '3 область', 'вне круга, выше'],
        [4, 4, '3 область', 'вне круга, в первом квадранте'],

        // Класс 4: точка на границе между 1 и 2
        [-1, 4, '1 область', 'на линии y = x + R, относится к 1 области'],
        [-2.5, 2.5, '1 область', 'ещё одна точка на линии y = x + R'],

        // Класс 5: точка на границе между 2 и 3
        [3, -4, '2 область', 'на границе круга, в четвёртом квадранте'],
        [-3.5355339059327378, 3.5355339059327378, '2 область', 'на границе круга, во втором квадранте, выше линии']
    ];

    test.each(testCases)('TestPoint(%i, %i) = %s (%s)', (x, y, expected, description) => {
        const point = new checkPoint(R);
        expect(point.TestPoint(x, y)).toBe(expected);
    });

    // Дополнительно: тесты для граничных значений
    const boundaryTestCases = [
        [0, R - 0.001, '1 область', 'внутри круга, близко к границе круга'],
        [0, R + 0.001, '3 область', 'вне круга, близко к границе круга'],
        [-2, 2.999, '1 область', 'внутри круга, близко к линии y = x + R'],
        [-2, 3.001, '2 область', 'выше линии y = x + R, близко к границе'],
        [-1, 3.999, '1 область', 'чуть ниже линии y = x + R'],
        [-1, 4.001, '2 область', 'чуть выше линии y = x + R'],
    ];

    test.each(boundaryTestCases)('Граничное значение TestPoint(%i, %i) = %s (%s)', (x, y, expected, description) => {
        const point = new checkPoint(R);
        expect(point.TestPoint(x, y)).toBe(expected);
    });

    // Тесты для валидации R
    test('R <= 0 вызывает ошибку', () => {
        expect(() => new checkPoint(0)).toThrow('R must be > 0');
        expect(() => new checkPoint(-5)).toThrow('R must be > 0');
    });

    test('R > 0 создаёт объект', () => {
        expect(() => new checkPoint(5)).not.toThrow();
    });
});